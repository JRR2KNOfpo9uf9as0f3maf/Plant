mode = bot[getBot().name:upper()].mode
startfrom = bot[getBot().name:upper()].startfrom
slot = bot[getBot().name:upper()].slot
farmList = bot[getBot().name:upper()].farmList
idList = bot[getBot().name:upper()].idList
webhook = bot[getBot().name:upper()].webhooktask.link
message = bot[getBot().name:upper()].webhooktask.messageid
e = 200
local iTile = 0
local xTile = 0
seedd = 1
wirz = {}
bajigur = ""
bjir = ""

function infokand(content)
	if setting.webhook.access then
		text = [[
			$webHookUrl = "]]..setting.webhook.status..[["
			$payload = @{
				content = "]]..content..[["
			}
			[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
			Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Post -ContentType 'application/json'
		]]
		local file = io.popen("powershell -command -", "w")
		file:write(text)
		file:close()
	end
end

function wirrcuy()
    bajigur = ""
	for i = 1, #farmList do
		bajigur = bajigur.."\n||"..string.upper(farmList[i]).."|| : ["..(wirz[farmList[i]] or "?").."]"
	end
	return bajigur
end

function wirrzz()
    bajigur = ""
	for i = 1, #setting.storage.world do
		bajigur = bajigur.."\n||"..string.upper(setting.storage.world[i]).."|| "..(wirz[setting.storage.world[i]] or "?")..""
    end
    return bajigur
end

function webcuy(info)
	if setting.webhook.access then
        local text = [[
            $webHookUrl = "]]..webhook..[[/messages/]]..message..[["
            $payload = @{
                username = "BizzantiuM's"
                embeds = @(
                    @{
                        title = "AUTO PLANT v1.3"
                        color = "]]..math.random(111111,999999)..[["
                        fields = @(
                            @{
                                name = ""
                                value = "]].."```RUNNING``` : [ ```"..alamak(os.difftime(os.time(),st)).."``` ]"..[["
                                inline = "false"
                            }
                            @{
                                name = "BOT INFO"
                                value = "]].."```TASK``` [```"..info.."```]\n```NAME``` : [||"..getBot().name.."||][```" ..slot.. "```]\n```WORLD``` : [||"..getBot().world.."||]\n```LEVEL``` : ["..getBot().level.."]\n```STATUS``` : ["..string.upper(getBot().status).."]\n```PING``` : ["..getPing().."]\n```TOTAL``` : [ "..startfrom.." ] / [ "..#farmList.." ]"..[["
                                inline = "false"
                            }
                            @{
                                name = "STORAGE"
                                value = "]]..wirrzz()..[["
                                inline = "true"
                            }
                            @{
                                name = "WORLD STATIC"
                                value = "]]..wirrcuy()..[["
                                inline = "true"
                            }
                        )
                        footer = @{
                            text = "Developed by BizzantiuM's`nLast updated : ]]..(os.date"%d/%m/%y":upper().." at ")..os.date("%I")..":"..os.date("%M").." "..os.date("%p"):upper()..[["
                        }
                    }
                )
            }
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Patch -ContentType 'application/json'
        ]]
        local pipe = io.popen("powershell -command -", "w")
        pipe:write(text)
        pipe:close()
    end
end

function round(n)
    return n % 1 > 0.5 and math.ceil(n) or math.floor(n)
end

function reconnect(world,id,x,y)
    if getBot().status ~= "online" then
        infokand("[ ||"..getBot().name.."|| ] status is "..getBot().status.." ! @everyone")
        sleep(e)
        while getBot().status ~= "online" do
            connect()
            sleep(setting.delay.reconnect)
        end
        while getBot().world ~= world:upper() do
            sendPacket("action|join_request\nname|"..world:upper().."\ninvitedWorld|0",3)
            sleep(setting.delay.warp)
        end
        if id ~= "" then
            if getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 then
                repeat
				sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0", 3)
				sleep(setting.delay.warp)
				until getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg ~= 6
            end
        end
        if x and y then
            while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                findPath(x,y)
                sleep(e)
            end
        end
        infokand("[ ||"..getBot().name.."|| ] status is "..getBot().status.." ! @everyone")
        sleep(e)
    end
end

function warp(world,id)
    bz = world
    if door then
        bz = bz .. "|" .. door
    end
    if getBot().world ~= string.upper(world) then
        addHook('onvariant','nuked',function (varlist)
            if varlist[0] == 'OnConsoleMessage' then
                if string.find(varlist[1],'inaccessible.') then
                    nuked = true
                end
            end
        end)
        while getBot().world ~= string.upper(world) and not nuked do
            sendPacket('action|join_request\nname|'..bz..'\ninvitedWorld|0',3)
            sleep(setting.delay.warp)
        end
        removeHooks()
        sleep(1000)
    end
    if door and getBot().world == string.upper(world) then
        local stuck = 0
        while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 and not wrong do
            sendPacket("action|join_request\nname|"..world:upper()..'|'..id:upper().."\ninvitedWorld|0",3)
            sleep(setting.delay.warp)
            if stuck == 5 then
                wrong = true
            else
                stuck = stuck + 1
            end
        end
    end
end

function plant(bz)
    webcuy("Planting mode : "..string.upper(mode).."")
	if mode == "up" then
		t1 = 99
		t2 = 0
		t3 = -1
		tiles = 0
		for y = -1, 53 do
			for x = t1, t2, t3 do
				if getTile(x, y).fg == 0 and getTile(x, y + 1).flags ~= 0 then
					if setting.mode.splice then
						if findItem(setting.seed) == 0 or findItem(setting.mode.seed) == 0 then
							take(bz)
							door = idList
							warp(bz,door)
							sleep(e)
							webcuy("Planting mode : "..string.upper(mode).."")
						end
					else
						if findItem(setting.seed) == 0 then
							take(bz)
							door = idList
							warp(bz,door)
							sleep(e)
							webcuy("Planting mode : "..string.upper(mode).."")
						end
					end
					findPath(x,y)
					door = idList
					if setting.mode.splice then
						while getTile(x,y).fg ~= setting.seed do
							place(setting.seed,0,0)
							sleep(setting.delay.plant)
							reconnect(bz,door,x,y)
						end
						while getTile(x,y).fg == setting.seed do
							place(setting.mode.seed,0,0)
							sleep(setting.delay.plant)
							reconnect(bz,door,x,y)
						end
					else
						if getTile(x,y).fg ~= setting.seed then
							place(setting.seed,0,0)
							sleep(setting.delay.plant)
							reconnect(bz,door,x,y)
						end
					end
				end
			end
			if tiles == 1 then
				if t1 == 0 then
					t1 = 99
					t2 = 0
					t3 = -1
					tiles = 0
				elseif t1 == 99 then
					t1 = 0
					t2 = 99
					t3 = 1
					tiles = 0
				end
			elseif tiles == 0 then
				tiles = tiles + 1
			end
		end
	elseif mode == "down" then
		t1 = 99
		t2 = 0
		t3 = -1
		tiles = 0
		for y = 53, 0, -1 do
			for x = t1, t2, t3 do
				if getTile(x, y).fg == 0 and getTile(x, y + 1).flags ~= 0 then
					if setting.mode.splice then
						if findItem(setting.seed) == 0 or findItem(setting.mode.seed) == 0 then
							take(bz)
							door = idList
							warp(bz,door)
							sleep(e)
							webcuy("Planting mode : "..string.upper(mode).."")
						end
					else
						if findItem(setting.seed) == 0 then
							take(bz)
							door = idList
							warp(bz,door)
							sleep(e)
							webcuy("Planting mode : "..string.upper(mode).."")
						end
					end 
					findPath(x,y)
					door = idList
					if setting.mode.splice then
						while getTile(x,y).fg ~= setting.seed do
							place(setting.seed,0,0)
							sleep(setting.delay.plant)
							reconnect(bz,door,x,y)
						end
						while getTile(x,y).fg == setting.seed do
							place(setting.mode.seed,0,0)
							sleep(setting.delay.plant)
							reconnect(bz,door,x,y)
						end
					else
						if getTile(x,y).fg ~= setting.seed then
							place(setting.seed,0,0)
							sleep(setting.delay.plant)
							reconnect(bz,door,x,y)
						end
					end
				end
			end
			if tiles == 1 then
				if t1 == 0 then
					t1 = 99
					t2 = 0
					t3 = -1
					tiles = 0
				elseif t1 == 99 then
					t1 = 0
					t2 = 99
					t3 = 1
					tiles = 0
				end
			elseif tiles == 0 then
				tiles = tiles + 1
			end
		end
	end
	iTile = 0
end

function gscan(id)
	count = 0
	for _, obj in pairs(getObjects()) do
		if obj.id == id then
			count = count + obj.count
		end
	end
	return count
end

function cektree(bz)
	webcuy('Rechecking worlds')
	for i = 1,2 do
        for _, tile in pairs(getTiles()) do
			if tile.fg == 0 and getTile(tile.x, tile.y + 1).flags ~= 0 then
				if setting.mode.splice then
					if findItem(setting.seed) == 0 or findItem(setting.mode.seed) == 0 then
						take(bz)
						door = idList
						warp(bz,door)
						sleep(e)
						webcuy("Planting mode : "..string.upper(mode).."")
					end
				else
					if findItem(setting.seed) == 0 then
						take(bz)
						door = idList
						warp(bz,door)
						sleep(e)
						webcuy("Planting mode : "..string.upper(mode).."")
					end
				end 
				findPath(tile.x,tile.y)
				door = idList
				if setting.mode.splice then
					while getTile(tile.x,tile.y).fg ~= setting.seed do
						place(setting.seed,0,0)
						sleep(setting.delay.plant)
						reconnect(bz,door,tile.x,tile.y)
					end
					while getTile(tile.x,tile.y).fg == setting.seed do
						place(setting.mode.seed,0,0)
						sleep(setting.delay.plant)
						reconnect(bz,door,tile.x,tile.y)
					end
				else
					if getTile(tile.x,tile.y).fg ~= setting.seed then
						place(setting.seed,0,0)
						sleep(setting.delay.plant)
						reconnect(bz,door,tile.x,tile.y)
					end
				end
			end
		end
	end
end

barr = {setting.seed,setting.mode.seed}
function take(bz)
    for i = seedd , #setting.storage.world do
        setJob('Take seed')
		world = setting.storage.world[i]
        door = setting.storage.id
        warp(world,door)
        webcuy('Take seeds')
		if not nuked then
			if not wrong then
				if setting.mode.splice then
					if gscan(setting.seed) == 0 or gscan(setting.mode.seed) == 0 then
						wirz[world] = "[ "..gscan(setting.seed).." / "..gscan(setting.mode.seed).." ] EMPTY !!"
						infokand("[ ||"..getBot().world.."|| ] is empty, skipped world. @everyone")
						seedd = seedd + 1
						if seedd > #setting.storage.world then
							infokand("All storage is empty!, @everyone")
							if setting.removeBot then
								removeBot(getBot().name)
								sleep(e)
							end
							error()
						end
					else
						for _, list in pairs(barr) do
							for _, object in pairs(getObjects()) do
								if object.id == list then
									findPath(round((object.x)/32), math.floor((object.y)/32))
									sleep(e)
									collect(2)
									sleep(e*3)
								end
								if findItem(list) > 0 then
									break
								end
							end
						end
						sleep(100)
						break
					end
				else
					if gscan(setting.seed) == 0 then
						wirz[world] = "[ "..gscan(setting.seed).." / "..gscan(setting.mode.seed).." ] EMPTY !!"
						infokand("[ ||"..getBot().world.."|| ] is empty, skipped world. @everyone")
						seedd = seedd + 1
						if seedd > #setting.storage.world then
							infokand("All storage is empty!, @everyone")
							if setting.removeBot then
								removeBot(getBot().name)
								sleep(e)
							end
							error()
						end
					else
						for _, object in pairs(getObjects()) do
							if object.id == setting.seed then
								findPath(round((object.x)/32), math.floor((object.y)/32))
								sleep(e)
								collect(2)
								sleep(e*3)
							end
							if findItem(setting.seed) > 0 then
								break
							end
						end
						sleep(100)
						break
					end
				end
			else
                wirz[world] = 'WRONG DOOR ID'
                wrong = false
                sleep(1000)
                print("Id door storage seeds is wrong, check ur id door !!")
                infokand("Id door storage seeds is wrong, check ur id door !!")
                seedd = seedd + 1
                if seedd > #setting.storage.world then
					print('All storage seeds is empty')
					infokand("All storage seeds is empty!, @everyone")
                    if setting.removeBot then
                        removeBot(getBot().name)
                        sleep(100)
                    end
                    error()
                end
            end
        else
            wirz[world] = 'NUKED'
            nuked = false
            sleep(1000)
            print("World storage seeds is NUKED!, check ur world !!")
            infokand("World storage seeds is NUKED!, check ur world !! @everyone")
            seedd = seedd + 1
            if seedd > #setting.storage.world then
                print('All storage seeds is empty')
                infokand("All storage seeds is empty!, @everyone")
                if setting.removeBot then
                    removeBot(getBot().name)
                    sleep(100)
                end
                error()
            end
        end
    end
	wirz[world] = "[ "..gscan(setting.seed).." / "..gscan(setting.mode.seed).." ]"
end

st = os.time()
function alamak(secs)
	local seconds = tonumber(secs)
	if seconds <= 0 then
	  	return "00:00:00";
	else
	  	h = string.format("%02.f", math.floor(secs/3600));
		m = string.format("%02.f", math.floor(secs/60 - (h*60)));
	  	s = string.format("%02.f", math.floor(secs - h*3600 - m *60));
	  	return h..":"..m..":"..s
	end
end

if BizzantiuM.version == "1.3" and BizzantiuM.maker == "akbarsht" then
	for i =  startfrom, #farmList do
		door = idList
		setJob("Planting")
		sleep(e)
		warp(farmList[i],door)
		webcuy("Planting mode "..mode.."")
		if not nuked then
			if not wrong then
				plant(farmList[i])
				cektree(farmList[i])
				wirz[farmList[i]] = "```"..alamak(os.difftime(os.time(),st)).."```"
            else
                wirz[farmList[i]] = 'WRONG DOOR ID'
                wrong = false
                sleep(1000)
                print("[ ||"..farmList[i].."|| ] is wrong door id, skipped world")
                infokand("[ ||"..farmList[i].."|| ] is wrong door id, skipped world @everyone")
            end
        else
            wirz[farmList[i]] = 'NUKED'
            nuked = false
            sleep(1000)
            print("||"..farmList[i].."|| is NUKED!, check ur world !!")
            infokand("[ ||"..farmList[i].."|| ] is NUKED!, check ur world !! @everyone")
        end
	end
end
print("ALREADY FINISHED ALL FARM ! Removing BOT")
infokand("[ ||"..getBot().name.."|| ] slot : "..slot.." has already planting all worlds, @everyone")
webcuy("ALREADY FINISHED ALL FARM ! Removing BOT")
sleep(e)
if setting.removeBot then
	removeBot(getBot().name)
	sleep(e)
end
error()
